import pandas as pd
import numpy as np
from sklearn.compose import ColumnTransformer
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error
from sklearn.model_selection import train_test_split
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import OneHotEncoder, StandardScaler

# Load the dataset
df = pd.read_csv('/Users/christianrobertson/Desktop/Work/dataset.csv')

# Correctly parsing 'TimeStarted' with a specified format
# Adjust '%H:%M:%S' if your timestamp format is different
df['HourOfDay'] = pd.to_datetime(df['TimeStarted'], format='%H:%M:%S', errors='coerce').dt.hour

def part_of_day(hour):
    if 5 <= hour < 12:
        return 'Morning'
    elif 12 <= hour < 17:
        return 'Afternoon'
    elif 17 <= hour < 21:
        return 'Evening'
    else:
        return 'Night'
df['PartOfDay'] = df['HourOfDay'].apply(part_of_day)

# Convert 'Month' to numeric and create 'IsMonthStart' and 'IsMonthEnd' features
df['Month'] = pd.to_datetime(df['Month'], format='%B', errors='coerce').dt.month
df['IsMonthStart'] = pd.to_datetime(df['Month'], errors='coerce').dt.is_month_start.astype(int)
df['IsMonthEnd'] = pd.to_datetime(df['Month'], errors='coerce').dt.is_month_end.astype(int)

# Prepare the Data
# Adjust feature set to include health-related and temporal features
X = df.drop(['ServiceDurationInSeconds', 'ID', 'TimeStarted', 'TimePaid', 'Address'], axis=1, errors='ignore')
y = df['ServiceDurationInSeconds']

# Update categorical_features to include new temporal and health-related features
categorical_features = ['Day', 'TimeInDay', 'Gender', 'PartOfDay', 'MalignantCancer', 'SkinCancer']
numeric_features = X.select_dtypes(include=[np.number]).columns.tolist()

# Preprocessing pipeline
preprocessor = ColumnTransformer(
    transformers=[
        ('num', StandardScaler(), numeric_features),
        ('cat', OneHotEncoder(), categorical_features)
    ])

# Build and Train the Model
pipeline = Pipeline([
    ('preprocessor', preprocessor),
    ('regressor', LinearRegression())
])

# Split data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train the model
pipeline.fit(X_train, y_train)

# Predict and evaluate
predictions = pipeline.predict(X_test)

# Evaluate the model
mae = mean_absolute_error(y_test, predictions)
print(f"Mean Absolute Error: {mae}")

# Output some predictions for inspection
print("Sample predictions:", predictions[:10])
